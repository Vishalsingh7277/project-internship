<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>HODL INFO</title>
  <style>
    body {
  background-color: #0a1e29;
  color: #ffffff;
  font-family: sans-serif;
}

header {
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 1rem;
}

h1, h2 {
  color: #ffffff;
}

nav {
  text-align: center;
}

.table {
  border-collapse: collapse;
  width: 100%;
  margin-bottom: 1rem;
  border: 1px solid #0a1e29;
}

th, td {
  padding: 0.5rem;
  border: 1px solid #0a1e29;
  text-align: center;
}

.table th {
  background-color: #133146;
  border-top: 2px solid #ffffff;
  border-left: 2px solid #ffffff;
}

.table td {
  border-top: 2px solid #ffffff;
  border-right: 2px solid #ffffff;
}

nav a {
  color: #ffffff;
}

footer {
  text-align: center;
}

footer p {
  color: #ffffff;
}

.table tr:nth-child(even) {
  background-color: #1f3c54;
}

.table tr:nth-child(odd) {
  background-color: #264663;
}

  </style>
</head>
<body>
  <header>
    <h1>HODL INFO</h1>
    <nav>
      <a href="#">INR</a>
      <a href="#">BTC</a>
      <a href="#">BUY BTC</a>
      <a href="#">Connect Telegram</a>
    </nav>
  </header>
  <main>
    <h2>Best Price to Trade</h2>
    <table class="table">
      <thead>
        <tr>
          <th>Platform</th>
          <th>Last Traded Price</th>
          <th>Buy / Sell Price</th>
          <th>Difference</th>
          <th>Savings</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>WazirX</td>
          <td>₹25,72,612</td>
          <td>₹25,72,610/25,72,612</td>
          <td>-3.14%</td>
          <td>▼₹83,498</td>
        </tr>
        <tr>
          <td>Bitbns</td>
          <td>₹28,83,906</td>
          <td>₹28,55,164/28,82,157</td>
          <td>8.58%</td>
          <td>▲₹2,27,796</td>
        </tr>
        <tr>
          <td>Colodax</td>
          <td>₹25,46,035</td>
          <td>₹25,33,304/28,51,559</td>
          <td>-4.14%</td>
          <td>▼₹1,10,074</td>
        </tr>
        <tr>
          <td>Zebpay</td>
          <td>₹26,50,000</td>
          <td>₹26,49,999/26,21,000</td>
          <td>-0.23%</td>
          <td>▼₹6,110</td>
        </tr>
      </tbody>
    </table>
    <p><a href="#">Add HODL INFO to home screen</a></p>
    <script>
        
const express = require('express');
const pg = require('pg');

// Create an Express app
const app = express();

// Connect to the PostgreSQL database
const pool = new pg.Pool({
  user: 'postgres',
  host: 'localhost',
  database: 'my_database',
  password: 'password',
  port: 5432,
});

// Define the database schema
const createTableQuery = `
CREATE TABLE IF NOT EXISTS tickers (
  id SERIAL PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  last NUMERIC(10,2) NOT NULL,
  buy NUMERIC(10,2) NOT NULL,
  sell NUMERIC(10,2) NOT NULL,
  volume NUMERIC(10,2) NOT NULL,
  base_unit VARCHAR(255) NOT NULL
);
`;

// Create the table if it doesn't exist
pool.query(createTableQuery, (err, res) => {
  if (err) {
    console.error(err);
    return;
  }

  console.log('Table created successfully');
});

// Define a route to fetch the top 10 tickers from the WazirX API
app.get('/tickers', async (req, res) => {
  // Fetch the top  tickers from the WazirX API
  const response = await fetch('https://api.wazirx.com/api/v2/tickers');
  const data = await response.json();

  // Extract the top tickers from the response
  const top10Tickers = data.tickers.slice(0, 10);

  // Store the top tickers in the database
  const insertQuery = `
INSERT INTO tickers (name, last, buy, sell, volume, base_unit)
VALUES ($1, $2, $3, $4, $5, $6);
`;

  await Promise.all(top10Tickers.map(ticker => {
    return pool.query(insertQuery, [ticker.name, ticker.last, ticker.buy, ticker.sell, ticker.volume, ticker.base_unit]);
  }));

  // Send the top tickers back to the client
  res.send(top10Tickers);
});

// Define a route to get the top tickers from the database
app.get('/tickers-from-db', async (req, res) => {
  // Get the top tickers from the database
  const selectQuery = `
SELECT * FROM tickers
ORDER BY last DESC
LIMIT 10;
`;

  const results = await pool.query(selectQuery);

  // Send the top tickers back to the client
  res.send(results.rows);
});

// Start the Express server
app.listen(3000, () => {
  console.log('Server listening on port 3000');
});

    </script>
  </main>
  <footer>
    <p>© 2023 HODL INFO</p>
  </footer>
</body>
</html>
